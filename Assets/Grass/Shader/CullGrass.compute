#pragma kernel Vote
#pragma kernel Scan
#pragma kernel ScanGroupSums
#pragma kernel Compact
#pragma kernel ResetArgs

#define NUM_THREAD_GROUPS_X 64

struct GrassData {
    float3 position;
    float2 worldUV;
};

RWStructuredBuffer<uint> _ArgsBuffer;
//RWStructuredBuffer<uint> _ArgsBufferLOD;
RWStructuredBuffer<GrassData> _GrassDataBuffer;
RWStructuredBuffer<uint> _VoteBuffer;
RWStructuredBuffer<uint> _ScanBuffer;
RWStructuredBuffer<uint> _GroupSumArray;
RWStructuredBuffer<uint> _GroupSumArrayIn;
RWStructuredBuffer<uint> _GroupSumArrayOut;
RWStructuredBuffer<GrassData> _CulledGrassOutputBuffer;
RWStructuredBuffer<GrassData> _OcclusionBuffer;

float _ScaleY;
float _XAxisRotation;
uint _NumInstance;
float4x4 MATRIX_VP;
int _NumOfGroups;
float _Distance;
float3 _CameraPosition;


groupshared uint temp[2 * NUM_THREAD_GROUPS_X];
groupshared uint grouptemp[2 * 1024];


[numthreads(128, 1, 1)]
void Vote(uint3 id : SV_DispatchThreadID) {

    if(id.x < _NumInstance){
        float4 position = float4(_GrassDataBuffer[id.x].position.xyz, 1.0f);
    
        float4 clipspace = mul(MATRIX_VP, position);

        float3 NDCSpace = clipspace.xyz;
        NDCSpace /= clipspace.w;

        NDCSpace.x = NDCSpace.x * 0.5f + 0.5f;
        NDCSpace.y = NDCSpace.y * 0.5f + 0.5f;
        NDCSpace.z = clipspace.w;

        // screen space [0,1]
        // create a margin on x,y axis to avoid flickering when camera slightly move
        // also check if object is behind camera

        //bool inView =( NDCSpace.x < - pow(0.2f, NDCSpace.z >= 1 ? NDCSpace.z : 1) || NDCSpace.x > pow(1.2f, 1 / max(1, NDCSpace.z)) 
        //                || NDCSpace.z <= -0.2f || NDCSpace.y > 1.5f || NDCSpace.y <= -0.5f ) ? 0 : 1;        

                
        bool inView =( NDCSpace.x < - 0.2f || NDCSpace.x > 1.2f 
                        || NDCSpace.z <= -0.2f || NDCSpace.y > 1.5f || NDCSpace.y <= -0.5f ) ? 0 : 1;
        
        // to avoid tip of grass get culled and flickered when camera rotate on X axis (head up) so all the grass around 10m radius will be rendered
        bool aroundCam = distance(_CameraPosition, position.xyz) < 10.0f;
        inView =  aroundCam || inView; 

        bool withinDistance = distance(_CameraPosition, position.xyz) < _Distance;
        _VoteBuffer[id.x] = inView * withinDistance;
    }
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(NUM_THREAD_GROUPS_X, 1, 1)]
void Scan(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {

    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    temp[2 * groupTID] = _VoteBuffer[2 * tid];
    temp[2 * groupTID + 1] = _VoteBuffer[2 * tid + 1];
    int d;
    int numElements = 2 * NUM_THREAD_GROUPS_X;

    for (d = numElements >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            temp[bi] += temp[ai];
        }

        offset *= 2;
    }

    if (groupTID == 0) {
        _GroupSumArray[_groupID.x] = temp[numElements - 1];
        temp[numElements - 1] = 0;
    }

    for (d = 1; d < numElements; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if(id.x < _NumInstance / 2){
        _ScanBuffer[2 * tid] = temp[2 * groupTID ];
        _ScanBuffer[2 * tid + 1] = temp[2 * groupTID + 1];
    }
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(1024, 1, 1)]
void ScanGroupSums(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    int tid = (int) id.x;
    int groupTID = (int) groupThreadID.x;
    int groupID = (int) _groupID.x;

    int offset = 1;
    grouptemp[2 * groupTID] = _GroupSumArrayIn[2 * tid];
    grouptemp[2 * groupTID + 1] = _GroupSumArrayIn[2 * tid + 1];
    int d;

    for (d = _NumOfGroups >> 1; d > 0; d >>= 1) {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            grouptemp[bi] += grouptemp[ai];
        }

        offset *= 2;
    }

    if (tid == 0)
        grouptemp[_NumOfGroups - 1] = 0;

    for (d = 1; d < _NumOfGroups; d *= 2) {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (tid < d) {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = grouptemp[ai];
            grouptemp[ai] = grouptemp[bi];
            grouptemp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    if(tid < _NumOfGroups){
        _GroupSumArrayOut[2 * tid] = grouptemp[2 * tid];
        _GroupSumArrayOut[2 * tid + 1] = grouptemp[2 * tid + 1];
    }
}


[numthreads(128, 1, 1)]
void Compact(uint3 id : SV_DISPATCHTHREADID, uint groupIndex : SV_GROUPINDEX, uint3 _groupID : SV_GROUPID, uint3 groupThreadID : SV_GROUPTHREADID) {
    if(id.x < _NumInstance)
    {

        uint tid = id.x;
        uint groupID = _groupID.x;
        uint groupSum = groupID.x > 0 ? _GroupSumArray[groupID.x] : 0;
        bool inCamera = _VoteBuffer[id.x];
    
        if (inCamera == 1) {

            InterlockedAdd(_ArgsBuffer[1], 1);
            _CulledGrassOutputBuffer[_ScanBuffer[tid] + groupSum] = _GrassDataBuffer[tid];
        }
    }
}

[numthreads(1, 1, 1)]
void ResetArgs(uint3 id : SV_DISPATCHTHREADID) {
    _ArgsBuffer[1] = (uint)0;
}